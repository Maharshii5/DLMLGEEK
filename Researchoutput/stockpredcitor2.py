# -*- coding: utf-8 -*-
"""stockPredcitor2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KHIHZr2FbP4wCIORQS25qonPZLzDnKMt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import yfinance as yf
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout

# Load historical stock data for a specific company
ticker = 'ASTRAL.NS'  # Example: Reliance Industries Limited
data = yf.download(ticker, start='2010-01-01', end='2024-11-01')

# Preprocess the data
data = data[['Close']]
data = data.values
data = data.astype('float32')

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled = scaler.fit_transform(data)

# Create a training dataset
train_size = int(len(data_scaled) * 0.8)
train_data = data_scaled[:train_size]

# Prepare the data for LSTM
def create_dataset(dataset, time_step=1):
    X, Y = [], []
    for i in range(len(dataset) - time_step - 1):
        X.append(dataset[i:(i + time_step), 0])
        Y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 60  # Look back 60 days
X_train, y_train = create_dataset(train_data, time_step)
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=50, batch_size=32)

# Create the test dataset
test_data = data_scaled[train_size - time_step:]
X_test, y_test = create_dataset(test_data, time_step)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Get predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)  # Inverse the scaling

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, predictions))

# Plotting the results
plt.figure(figsize=(14, 5))
plt.plot(data[len(data) - len(predictions):], label='Actual Prices', color='blue')
plt.plot(predictions, label='Predicted Prices', color='red')
plt.title(f'Stock Price Prediction for {ticker} (RMSE: {rmse:.2f})')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt
from prophet import Prophet

stock_symbols = ['JIOFIN.NS']  # Add more stock symbols as needed

# Dictionary to store predictions for each company
company_predictions = {}

for symbol in stock_symbols:
    # Step 1: Load and Preprocess Data
    data = yf.download(symbol, start='2015-01-01', end='2024-11-01')
    close_prices = data['Close'].values

    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(close_prices.reshape(-1, 1))

    # Step 2: Prepare Training Data for LSTM
    train_data_len = int(np.ceil(len(scaled_data) * 0.8))
    train_data = scaled_data[0:int(train_data_len), :]

    x_train, y_train = [], []
    for i in range(60, len(train_data)):
        x_train.append(train_data[i-60:i, 0])
        y_train.append(train_data[i, 0])

    x_train, y_train = np.array(x_train), np.array(y_train)
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    # Step 3: Build and Train the LSTM Model
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(25),
        Dense(1)
    ])

    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(x_train, y_train, batch_size=64, epochs=50)

    # Step 4: Future Prediction using Facebook Prophet
    prophet_data = data.reset_index()[['Date', 'Close']]
    prophet_data.columns = ['ds', 'y']  # Rename for Prophet requirements

    # Remove timezone information for compatibility
    prophet_data['ds'] = pd.to_datetime(prophet_data['ds']).dt.tz_localize(None)

    # Initialize and fit the Prophet model
    prophet = Prophet()
    prophet.fit(prophet_data)

    # Make future predictions for 90 days
    future_dates = prophet.make_future_dataframe(periods=180)  # Predict 90 days into the future
    forecast = prophet.predict(future_dates)

    # Step 5: Plot both actual prices and future predictions
    plt.figure(figsize=(14, 7))

    # Plot actual historical prices
    plt.plot(data.index, data['Close'], label='Actual Prices', color='blue')

    # Plot future predictions
    plt.plot(forecast['ds'], forecast['yhat'], label='Predicted Prices (90 Days)', color='red')

    # Customize the plot
    plt.title(f'{symbol} Stock Price Forecast')
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

    # Step 6: Store future predictions
    company_predictions[symbol] = forecast[['ds', 'yhat']].tail(90)  # Store last 90 days of predictions

# Display predictions for each company in the dictionary
for symbol, predictions in company_predictions.items():
    print(f"Future 180-dayS predictions for {symbol}:\n", predictions)

import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error

# List of stock symbols to analyze
stock_symbols = ['HDFCLIFE.NS']  # Add more stock symbols as needed

# Dictionary to store predictions for each company
company_predictions = {}

for symbol in stock_symbols:
    # Step 1: Load and Preprocess Data
    data = yf.download(symbol, start='2015-01-01', end='2024-11-01')
    close_prices = data['Close'].values

    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(close_prices.reshape(-1, 1))

    # Step 2: Prepare Training Data for LSTM
    train_data_len = int(np.ceil(len(scaled_data) * 0.8))
    train_data = scaled_data[0:int(train_data_len), :]

    x_train, y_train = [], []
    for i in range(60, len(train_data)):
        x_train.append(train_data[i-60:i, 0])
        y_train.append(train_data[i, 0])

    x_train, y_train = np.array(x_train), np.array(y_train)
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    # Step 3: Build and Train the LSTM Model
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(25),
        Dense(1)
    ])

    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(x_train, y_train, batch_size=64, epochs=50)

    # Step 4: Test the model and calculate accuracy
    test_data = scaled_data[train_data_len - 60:, :]
    x_test, y_test = [], close_prices[train_data_len:]
    for i in range(60, len(test_data)):
        x_test.append(test_data[i-60:i, 0])

    x_test = np.array(x_test)
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

    predictions = model.predict(x_test)
    predictions = scaler.inverse_transform(predictions)

    # Calculate RMSE and MAPE
    rmse = np.sqrt(mean_squared_error(y_test, predictions))
    mape = mean_absolute_percentage_error(y_test, predictions)

    print(f"{symbol} LSTM Model - RMSE: {rmse:.2f}, MAPE: {mape*100:.2f}%")

    # Step 5: Future Prediction using Facebook Prophet
    prophet_data = data.reset_index()[['Date', 'Close']]
    prophet_data.columns = ['ds', 'y']  # Rename for Prophet requirements

    # Remove timezone information for compatibility
    prophet_data['ds'] = pd.to_datetime(prophet_data['ds']).dt.tz_localize(None)

    # Initialize and fit the Prophet model
    prophet = Prophet()
    prophet.fit(prophet_data)

    # Make future predictions for 90 days
    future_dates = prophet.make_future_dataframe(periods=360)  # Predict 90 days into the future
    forecast = prophet.predict(future_dates)

    # Step 6: Plot both actual prices and future predictions
    plt.figure(figsize=(14, 7))

    # Plot actual historical prices
    plt.plot(data.index, data['Close'], label='Actual Prices', color='blue')

    # Plot future predictions
    plt.plot(forecast['ds'], forecast['yhat'], label='Predicted Prices (360 Days)', color='red')

    # Customize the plot
    plt.title(f'{symbol} Stock Price Forecast')
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

    # Step 7: Store future predictions
    company_predictions[symbol] = forecast[['ds', 'yhat']].tail(360)  # Store last 90 days of predictions

# Display predictions for each company in the dictionary
for symbol, predictions in company_predictions.items():
    print(f"Future 360-day predictions for {symbol}:\n", predictions)